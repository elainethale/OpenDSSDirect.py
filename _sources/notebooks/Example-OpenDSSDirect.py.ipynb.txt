{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import opendssdirect as dss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.2.4'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import a file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the high level interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.run_command('Redirect ./../../tests/data/13Bus/IEEE13Nodeckt.dss')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the low level interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b''"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.dss_lib.DSSPut_Command('Redirect ./../../tests/data/13Bus/IEEE13Nodeckt.dss'.encode('ascii'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Module `Loads`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `dss` module has many submodules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dss.ActiveClass\n",
      "dss.Basic\n",
      "dss.Bus\n",
      "dss.CapControls\n",
      "dss.Capacitors\n",
      "dss.Circuit\n",
      "dss.CktElement\n",
      "dss.Element\n",
      "dss.Executive\n",
      "dss.Fuses\n",
      "dss.Generators\n",
      "dss.Isource\n",
      "dss.Lines\n",
      "dss.LoadShape\n",
      "dss.Loads\n",
      "dss.Meters\n",
      "dss.Monitors\n",
      "dss.PDElements\n",
      "dss.PVsystems\n",
      "dss.Parser\n",
      "dss.Properties\n",
      "dss.Reclosers\n",
      "dss.RegControls\n",
      "dss.Relays\n",
      "dss.Sensors\n",
      "dss.Settings\n",
      "dss.Solution\n",
      "dss.SwtControls\n",
      "dss.Topology\n",
      "dss.Transformers\n",
      "dss.Vsources\n",
      "dss.XYCurves\n",
      "dss.dss\n",
      "dss.utils\n"
     ]
    }
   ],
   "source": [
    "import types\n",
    "\n",
    "import inspect\n",
    "\n",
    "for name, module in inspect.getmembers(dss):\n",
    "    if isinstance(module, types.ModuleType) and not name.startswith('_'):\n",
    "        print(f'dss.{name}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each submodule has functions that can be called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dss.Loads.AllNames\n",
      "dss.Loads.AllocationFactor\n",
      "dss.Loads.CFactor\n",
      "dss.Loads.CVRCurve\n",
      "dss.Loads.CVRvars\n",
      "dss.Loads.CVRwatts\n",
      "dss.Loads.Class\n",
      "dss.Loads.Count\n",
      "dss.Loads.Daily\n",
      "dss.Loads.Duty\n",
      "dss.Loads.First\n",
      "dss.Loads.Growth\n",
      "dss.Loads.Idx\n",
      "dss.Loads.IsDelta\n",
      "dss.Loads.Model\n",
      "dss.Loads.Name\n",
      "dss.Loads.Next\n",
      "dss.Loads.NumCust\n",
      "dss.Loads.PF\n",
      "dss.Loads.PctMean\n",
      "dss.Loads.PctStdDev\n",
      "dss.Loads.RelWeighting\n",
      "dss.Loads.Rneut\n",
      "dss.Loads.Spectrum\n",
      "dss.Loads.Status\n",
      "dss.Loads.Vmaxpu\n",
      "dss.Loads.VminEmerg\n",
      "dss.Loads.VminNorm\n",
      "dss.Loads.Vminpu\n",
      "dss.Loads.XfkVA\n",
      "dss.Loads.Xneut\n",
      "dss.Loads.Yearly\n",
      "dss.Loads.ZipV\n",
      "dss.Loads.kV\n",
      "dss.Loads.kVABase\n",
      "dss.Loads.kW\n",
      "dss.Loads.kWh\n",
      "dss.Loads.kWhDays\n",
      "dss.Loads.kvar\n",
      "dss.Loads.puSeriesRL\n"
     ]
    }
   ],
   "source": [
    "for name, function in inspect.getmembers(dss.Loads):\n",
    "    if callable(function) and not name.startswith('_'):\n",
    "        print(f'dss.Loads.{name}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['671',\n",
       " '634a',\n",
       " '634b',\n",
       " '634c',\n",
       " '645',\n",
       " '646',\n",
       " '692',\n",
       " '675a',\n",
       " '675b',\n",
       " '675c',\n",
       " '611',\n",
       " '652',\n",
       " '670a',\n",
       " '670b',\n",
       " '670c']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.Loads.AllNames()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'670c'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.Loads.Name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "117.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dss.Loads.kW()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get all `kW`, one must iterate over all the loads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name=671 \t kW=1155.0\n",
      "Name=634a \t kW=160.0\n",
      "Name=634b \t kW=120.0\n",
      "Name=634c \t kW=120.0\n",
      "Name=645 \t kW=170.0\n",
      "Name=646 \t kW=230.0\n",
      "Name=692 \t kW=170.0\n",
      "Name=675a \t kW=485.0\n",
      "Name=675b \t kW=68.0\n",
      "Name=675c \t kW=290.0\n",
      "Name=611 \t kW=170.0\n",
      "Name=652 \t kW=128.0\n",
      "Name=670a \t kW=17.0\n",
      "Name=670b \t kW=66.0\n",
      "Name=670c \t kW=117.0\n"
     ]
    }
   ],
   "source": [
    "dss.Loads.First()\n",
    "\n",
    "while True:\n",
    "    \n",
    "    print(\n",
    "        'Name={name} \\t kW={kW}'.format(\n",
    "            name=dss.Loads.Name(), \n",
    "            kW=dss.Loads.kW()\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    if not dss.Loads.Next() > 0:\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `utils` module provides an `Iterator` class as a helper function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from opendssdirect.utils import Iterator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "load_kW = [i() for i in Iterator(dss.Loads, 'kW')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1155.0,\n",
       " 160.0,\n",
       " 120.0,\n",
       " 120.0,\n",
       " 170.0,\n",
       " 230.0,\n",
       " 170.0,\n",
       " 485.0,\n",
       " 68.0,\n",
       " 290.0,\n",
       " 170.0,\n",
       " 128.0,\n",
       " 17.0,\n",
       " 66.0,\n",
       " 117.0]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_kW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name=671 \t kW=1155.0\n",
      "Name=634a \t kW=160.0\n",
      "Name=634b \t kW=120.0\n",
      "Name=634c \t kW=120.0\n",
      "Name=645 \t kW=170.0\n",
      "Name=646 \t kW=230.0\n",
      "Name=692 \t kW=170.0\n",
      "Name=675a \t kW=485.0\n",
      "Name=675b \t kW=68.0\n",
      "Name=675c \t kW=290.0\n",
      "Name=611 \t kW=170.0\n",
      "Name=652 \t kW=128.0\n",
      "Name=670a \t kW=17.0\n",
      "Name=670b \t kW=66.0\n",
      "Name=670c \t kW=117.0\n"
     ]
    }
   ],
   "source": [
    "for i in Iterator(dss.Loads, 'Name'):\n",
    "    \n",
    "    print(\n",
    "        'Name={name} \\t kW={kW}'.format(\n",
    "            name=i(), \n",
    "            kW=dss.Loads.kW()\n",
    "        )\n",
    "    )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
